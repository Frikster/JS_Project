{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./public/lib/board.js","webpack:///./public/lib/player_pokemon.js","webpack:///./public/lib/poke_royale.js","webpack:///./public/lib/pokemon.js","webpack:///./public/lib/sidebar_pokemon.js","webpack:///./public/lib/spawn_sidebar.js","webpack:///./public/lib/ui.js","webpack:///./public/lib/util.js","webpack:///./public/vendor/stream.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AACA;AACA,aAAa,mBAAO,CAAC,oCAAQ;AACgB;AAClB;AACgB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sDAAY;;AAExC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,0BAA0B,uDAAa;AACvC;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,8BAA8B,uDAAa;AAC3C;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;;;AAIL;AACA,4BAA4B,uDAAa;AACzC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,qCAAqC,qDAAoB;AACzD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;;;AAGR;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,uDAAa;AACnC;AACA;;AAEA;AACA;AACA,6BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV,sBAAsB,uDAAa;AACnC;AACA,iDAAiD,kBAAkB;AACnE,qDAAqD,kBAAkB;AACvE;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,iCAAiC,kCAAkC;;;AAGnE;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,oEAAK,EAAC;;;AAGrB;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,6B;;;;;;;;;;;;ACtcA;AAAA;AAAgC;AAChC,aAAa,mBAAO,CAAC,oCAAQ;;AAE7B,4BAA4B,gDAAO;AACnC;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,0BAA0B;AAC1B;AACA;AACA;AACA,4CAA4C;;AAE5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACe,4EAAa,EAAC;;;;;;;;;;;;;AC3B7B;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sC;AACA,8BAA8B,2FAA2F;AACzH,qCAAqC,yEAAyE;AAC9G;AACA;AACA,qC;;AAEA;AACA;;;AAG4B;AACF;;AAE1B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,oBAAoB,8CAAK;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC;AAChC,+BAA+B;AAC/B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,K;AACA,iD;AACA,GAAG;AACH,cAAc,8CAAK;AACnB,kB;AACA,mBAAmB,8CAAK;AACxB,mBAAmB,8CAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,iCAAiC;AACjC;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,mC;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA,GAAG;;;AAGH;AACA,cAAc,gCAAE;AAChB,CAAC;;;;;;;;;;;;;;;ACrMD;AAAA,eAAe,mBAAO,CAAC,mDAAkB;AACzC,aAAa,mBAAO,CAAC,oCAAQ;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,+CAA+C;AAC/C;AACA;AACA,uBAAuB,2BAA2B;AAClD,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,uBAAuB,+BAA+B;AACtD,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,QAAQ,KAA2E,EAAE,eA4ChF,UAAU,KAAgD,EAAE,EAkB5D;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK,0E;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uC;AACA,wG;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,S;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,gCAAgC,yBAAyB,EAAE,0F;AAC3D;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;;;AAGA;;AAEe,sEAAO,EAAC;;;;AAIvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;;;ACpfA;AAAA;AAAA,aAAa,mBAAO,CAAC,oCAAQ;AACG;;AAEhC,6BAA6B,gDAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACe,6EAAc,E;;;;;;;;;;;;ACzB7B;AAAA;AAA8C;AAC9C,aAAa,mBAAO,CAAC,oCAAQ;;AAE7B;AACA;AACA;AACA;AACA,qBAAqB,wDAAc;AACnC;AACA,wBAAwB,wDAAc;AACtC,uEAAuE,wDAAc;AACrF;AACA;AACA;AACA,iDAAiD,wDAAc;AAC/D;AACA;;AAEA;AACA;AACA,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;;AAEA,uBAAuB,8BAA8B;AACrD,8BAA8B,wDAAc;AAC5C;AACA,8DAA8D,aAAa;AAC3E;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACe,2EAAY,E;;;;;;;;;;;;AC/E3B;AAAA;AAAA,aAAa,mBAAO,CAAC,oCAAQ,E;;AAE7B;AACA;AACA,uC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA,mBAAmB,OAAO;AAC1B;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,yBAAyB,OAAO;AAChC;AACA,GAAG;AACH;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;;AAEA,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC;AACtC;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC;AACxC,wCAAwC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0BAA0B,UAAU;AACpC,yCAAyC,cAAc;AACvD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sB;;;;;;;;;;;ACvVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;;AAEA,qCAAqC;AACrC;AACA;AACA;AACA;;AAEA,wB","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./public/lib/poke_royale.js\");\n","// const fs = require(\"file-system\");\n// const randomFile = require(\"select-random-file\");\nconst Util = require(\"./util\");\nimport PlayerPokemon from \"./player_pokemon\";\nimport * as UI from \"./ui\";\nimport SpawnSidebar from \"./spawn_sidebar\";\n\nclass Board {\n  constructor(ctx) {\n    this.ctx = ctx;\n    this.offsetX = 0;\n    this.offsetY = 0;\n    this.enemyPokemon = [];\n    this.playerPokemon = [];\n    this.selectorRectangle = null;\n    this.previousLeftMouseClick = [];\n    this.spawnSidebar = new SpawnSidebar(Board.SPAWN_SIDEBAR_COORDS);\n\n    let form = document.getElementById(\"custom-gif-input\");\n    if (form.attachEvent) {\n      form.attachEvent(\"submit\", this.handleCustomPokemonSubmit.bind(this));\n    } else {\n      form.addEventListener(\"submit\", this.handleCustomPokemonSubmit.bind(this));\n    }\n  }\n\n  add(object) {\n    if (object instanceof PlayerPokemon) {\n      this.playerPokemon.push(object);\n    } else {\n      throw new Error(\"unknown type of object\");\n    }\n  }\n\n  addPlayerPokemon(pos) {\n    const playerPokemon = new PlayerPokemon({\n      pos: pos || this.randomPosition(),\n    });\n\n    this.add(playerPokemon);\n    return playerPokemon;\n  }\n\n  randomPosition() {\n    return [Game.DIM_X * Math.random(), Game.DIM_Y * Math.random()];\n  }\n\n  allObjects() {\n    if (this.selectorRectangle) {\n      return [].concat(this.playerPokemon, this.enemyPokemon, [\n        this.selectorRectangle\n      ]);\n    } else {\n      return [].concat(this.playerPokemon, this.enemyPokemon);\n    }\n  }\n\n  allPokemon() {\n    return [].concat(this.playerPokemon, this.enemyPokemon);\n  }\n\n\n\n\n  moveObjects(timeDelta) {\n    // Handle collisions\n    Util.pairs(this.allPokemon()).filter(pair => \n      pair[0].isCollidedWith(pair[1])).\n      forEach(collisionPair => {\n        collisionPair[0].handleCollisionWith(collisionPair[1]);\n        collisionPair[1].handleCollisionWith(collisionPair[0]);\n        // let firstObj = collisionPair[0];\n        // let secondObj = collisionPair[1];\n        // if (firstObj.isMoving() && secondObj.isMoving()){\n        //   console.log('collision!')\n        //   let firstNewLocation = [firstObj.pos[0] - (2*firstObj.vel[0]), firstObj.pos[1] - (2*firstObj.vel[1])];\n        //   let secondNewLocation = [secondObj.pos[0] - (2*secondObj.vel[0]), secondObj.pos[1] - (2*secondObj.vel[1])];\n        //   firstObj.moveTo(firstNewLocation);\n        //   secondObj.moveTo(secondNewLocation);\n        // }\n    });\n\n\n\n    this.allPokemon().forEach(object => {\n      if (object instanceof PlayerPokemon) {\n        object.move(timeDelta);\n      }\n    });\n  }\n  // TODO: integrate timeDelta (?) - this hasn't been needed thus far\n  step(timeDelta) {\n    this.moveObjects(timeDelta);\n    this.checkDestinations();\n    // this.checkCollisions();\n  }\n\n  checkDestinations() {\n    this.allPokemon()\n      .filter(obj => obj.destination)\n      .forEach(obj => {\n        if (Util.dist(obj.pos, obj.destination) <= 15) { //TODO: Check hardcoding of this 15\n          obj.vel = [0, 0];\n        }\n      });\n  }\n\n  pokemonClicked(pokemon, clickPos) {\n    if (Util.dist(pokemon.pos, clickPos) <= pokemon.radius + 3) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // handleMouseClick(e) {\n  //     e.preventDefault();\n  //     if(e.button == 0) {\n  //         this.handleLeftMouseClick(e)\n  //     }\n  //     if(e.button == 1) {\n  //         // middle-mouse\n  //     }\n  //     if(e.button == 2) {\n  //         this.handleLeftMouseClick(e)\n  //     }\n\n  // }\n  selectOnePokemon(selectedPoke) {\n    selectedPoke.selected = true;\n    this.playerPokemon.forEach(poke => {\n      if (poke != selectedPoke) {\n        poke.selected = false;\n      }\n    });\n    return selectedPoke;\n  }\n  // TODO: refactor this function with the above\n  dragOnePokemon(draggedPoke) {\n    draggedPoke.isDragging = true;\n    this.spawnSidebar.pokemon.forEach(poke => {\n      if (poke != draggedPoke) {\n        poke.isDragging = false;\n      }\n    });\n    return draggedPoke;\n  }\n\n  selectOnlyThesePokemon(selectedPokes) {\n    selectedPokes.forEach(poke => {\n      poke.selected = true;\n    });\n\n    this.playerPokemon.forEach(poke => {\n      if (!selectedPokes.includes(poke)) {\n        poke.selected = false;\n      }\n    });\n    return selectedPokes;\n  }\n\n  cleanClickCoordinates(coords) {\n    return [coords[0] - document.getElementById(\"viewport\").getBoundingClientRect().x, coords[1] - document.getElementById(\"viewport\").getBoundingClientRect().y];\n  }\n\n  handleDeleteKeyClick(e) {\n    this.playerPokemon.slice(0).forEach(poke => {\n      if (poke.selected) {\n        this.playerPokemon.splice(this.playerPokemon.indexOf(poke), 1);\n      }\n    });\n  }\n\n  handleDoubleMouseClick(e) {\n    this.playerPokemon.forEach(poke => {\n      poke.selected = false;\n    });\n  }\n\n  handleLeftMouseClick(e) {\n    this.previousLeftMouseClick = this.cleanClickCoordinates([e.x, e.y]);\n    let pokeClicked = false;\n    this.playerPokemon.forEach(poke => {\n      if (this.pokemonClicked(poke, this.cleanClickCoordinates([e.x, e.y]))) {\n        this.selectOnePokemon(poke);\n        pokeClicked = true;\n        console.log('POKECLICKED')\n      }\n    });\n    this.spawnSidebar.pokemon.forEach(poke => {\n      if (this.pokemonClicked(poke, this.cleanClickCoordinates([e.x, e.y]))) {\n        // poke.isDragging = true;\n        this.dragOnePokemon(poke);\n        pokeClicked = true;\n        // this.selectorRectangle = null;\n      }\n    });\n    // Deselect a group\n    if(!pokeClicked && e.button === 0) {\n      this.playerPokemon.forEach(poke => {\n        poke.selected = false;\n      });\n    }\n  }\n\n  handleRightMouseClick(e) {\n    e.preventDefault();\n    let didDeselect = false;\n    this.playerPokemon.forEach(poke => {\n      if (this.pokemonClicked(poke, this.cleanClickCoordinates([e.x, e.y]))) {\n        poke.selected = false;\n        didDeselect = true;\n      }\n    });\n    if (!didDeselect) {\n      this.playerPokemon.forEach(poke => {\n        if (poke.selected) {\n          poke.setMotionAndDestination(this.cleanClickCoordinates([e.x, e.y]));\n        }\n      });\n    }\n  }\n\n  handleMouseDownAndMouseMove(e) {\n    if (!this.pokeBeingDragged()) {\n      if (!this.selectorRectangle) {\n        this.selectorRectangle = new UI.SelectorRectangle(\n          this.previousLeftMouseClick,\n          this.cleanClickCoordinates([e.x, e.y])\n        );\n      } else {\n        this.selectorRectangle.updateRect(this.cleanClickCoordinates([e.x, e.y]));\n      }\n    } else {\n      this.spawnSidebar.updateDraggedPoke(this.cleanClickCoordinates([e.x, e.y]));\n    }\n  }\n\n  handleCustomPokemonSubmit(e) {\n    if (e.preventDefault) e.preventDefault();\n    const front = e.target.front.value;\n    let back = e.target.back.value;\n    // const scale = e.target.scale.value;\n\n    const re = /(?:\\.([^.]+))?$/;\n\n    let img = document.createElement(\"img\");\n    img.src = this.front;\n\n    // let dimCheck = setInterval(function () {\n    //   debugger\n    //   if (img.naturalWidth) {\n    //     clearInterval(dimCheck);\n    //   }\n    // }, 10);\n\n\n    if (re.exec(front)[1] === 'gif') {\n      if (re.exec(back)[1] != \"gif\") { back = front;}\n      let options = {\n        imgSrc: front,\n        imgSrcBack: back,\n        imgId: Math.random().toString(36).substring(2)\n          + (new Date()).getTime().toString(36),\n        pos: [this.offsetX + 835, this.offsetY + 650],\n        // scale: scale\n      }\n      this.createPokemon(options) \n    } else {\n      alert(\"Front URL must end with '.gif'\");\n    }\n    return false;\n  }\n\n  createPokemon(options) {\n    let newPoke = new PlayerPokemon(options);\n    this.playerPokemon.push(newPoke);\n  }\n\n  createPokemonFromSidebarPokemon(droppedPoke){\n    // let id = droppedPoke.imgId;\n    // axios.get(`/sprites/${id}`)\n    //   .then((response) => {\n    //     console.log(response);\n    //     debugger;\n    //     let newPoke = new PlayerPokemon({\n    //       pos: droppedPoke.pos,\n    //       imgSrc: response.imgSrc,\n    //       imgId: droppedPoke.imgId\n    //     });\n    //     this.playerPokemon.push(newPoke);\n    //   })\n    //   .catch(function (error) {\n    //     console.log(error);\n    //   });\n    let newPoke = new PlayerPokemon({\n      pos: droppedPoke.pos,\n      imgSrc: `https://sprites.pokecheck.org/i/${droppedPoke.imgId}.gif`,\n      imgSrcBack: `https://sprites.pokecheck.org/b/${droppedPoke.imgId}.gif`,\n      imgId: droppedPoke.imgId\n    });\n    // debugger\n    this.playerPokemon.push(newPoke);\n    \n  }\n\n  handleMouseUp(e) {\n    let droppedPoke = this.pokeBeingDragged();\n    if (droppedPoke) {\n      this.createPokemonFromSidebarPokemon(droppedPoke);\n      this.spawnSidebar.resetAll();\n    } else {\n      this.playerPokemon.forEach(poke => {\n        if (this.pokemonClicked(poke, this.cleanClickCoordinates([e.x, e.y]))) {\n          this.selectOnePokemon(poke);\n        }\n      });\n      this.groupSelect();\n      this.selectorRectangle = null;\n    }\n  }\n\n  pokeBeingDragged() {\n    return this.spawnSidebar.pokemon.filter(poke => poke.isDragging)[0];\n  }\n\n  groupSelect() {\n    if (!this.selectorRectangle) return;\n    // debugger\n    this.selectOnlyThesePokemon(\n      this.playerPokemon.filter(poke =>\n        this.selectorRectangle.inSelectRectangle(poke.pos)\n      )\n    );\n  }\n\n  setOffsets(offsetX, offsetY) {\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n    this.spawnSidebar.translationOffset(offsetX, offsetY);\n  }\n\n  // applyRandomBackground() {\n  //   //TODO: finish\n  //   let blueprint_background = new Image();\n  //   const dir = '../assets/images/background'\n  //   // debugger\n  //   // randomFile(dir, (err, file) => {\n  //   //   blueprint_background.src = file;\n  //   // })\n  //   blueprint_background.src = dir + `/Broag_Garden_Entrance_image.jpg`;\n\n  //   blueprint_background.onload = function () {\n  //     let pattern = ctx.createPattern(this, \"repeat\");\n  //     ctx.fillStyle = pattern;\n  //     ctx.fill();\n  //   };\n  // }\n\n  draw(ctx) {\n    ctx.clearRect(this.offsetX, this.offsetY, 5000, 5000);\n    // ctx.restore();\n    // ctx.fillStyle = Board.BG_COLOR;\n    // this.applyRandomBackground();\n    // ctx.fillRect(this.offsetX, this.offsetY, 5000, 5000);\n\n    // Order by lowest y location. Pokemon lower on the canvas are in front and thus drawn last\n    this.allPokemon().sort((poke1, poke2) => (poke1.pos[1] + poke1.radius) - (poke2.pos[1] + poke2.radius)).forEach( poke => {\n      poke.draw(ctx);\n    });\n    if (this.selectorRectangle) { this.selectorRectangle.draw(ctx); }\n\n\n    // this.allObjects().forEach(object => {\n    //   // console.log('draw object:' + object)\n    //   if (object instanceof PlayerPokemon) {\n    //     // console.log(object.selected)\n    //   }\n    //   object.draw(ctx);\n    // });\n    this.spawnSidebar.draw(ctx);\n  }\n\n  start() {\n    this.lastTime = 0;\n    // start the animation\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  animate(time) {\n    const timeDelta = time - this.lastTime;\n\n    this.step(timeDelta);\n    this.draw(this.ctx);\n    this.lastTime = time;\n\n    // every call to animate requests causes another call to animate\n    requestAnimationFrame(this.animate.bind(this));\n  }\n}\n\nBoard.BG_COLOR = \"#28ba32\";\nBoard.DIM_X = 2000;\nBoard.DIM_Y = 1000;\nBoard.SPAWN_SIDEBAR_COORDS = [50 , 50];\n// Board.FPS = 32;\nBoard.MOVES = {\n    w: [0, 20],\n    a: [20, 0],\n    s: [0, -20],\n    d: [-20, 0],\n    up: [0, 20],\n    left: [20, 0],\n    down: [0, -20],\n    right: [-20, 0],\n};\n\nexport default Board;\n\n\n// class GameView {\n//   constructor(game, ctx) {\n//     this.ctx = ctx;\n//     this.game = game;\n//     this.player_pokemon = this.game.addPlayerPokemon();\n//   }\n\n\n\n//   start() {\n//     this.lastTime = 0;\n//     // start the animation\n//     requestAnimationFrame(this.animate.bind(this));\n//   }\n\n//   animate(time) {\n//     const timeDelta = time - this.lastTime;\n\n//     this.game.step(timeDelta);\n//     this.game.draw(this.ctx);\n//     this.lastTime = time;\n\n//     // every call to animate requests causes another call to animate\n//     requestAnimationFrame(this.animate.bind(this));\n//   }\n// }\n\n// GameView.MOVES = {\n//   w: [0, -1],\n//   a: [-1, 0],\n//   s: [0, 1],\n//   d: [1, 0],\n// };\n\n// module.exports = GameView;","import Pokemon from \"./pokemon\";\nconst Util = require(\"./util\");\n\nclass PlayerPokemon extends Pokemon {\n  constructor(options) {\n    options.radius = PlayerPokemon.RADIUS;\n    options.vel = [0, 0];\n    options.color = options.color || Util.randomColor();\n    let id = options.imgId;\n    if(id.length === 1) { id = '00' + id}\n    if (id.length === 2) { id = '0' + id }\n    options.imgSrc = options.imgSrc.replace(options.imgId, id);\n    options.imgSrcBack = options.imgSrcBack.replace(options.imgId, id);\n    options.imgId = id + '_' + Math.random().toString(36).substring(2)\n      + (new Date()).getTime().toString(36); // Make Id unique\n\n    super(options);\n    this.selected = options.selected || false;\n  }\n\n  relocate() {\n    this.pos = this.game.randomPosition();\n    this.vel = [0, 0];\n  }\n}\n\nPlayerPokemon.RADIUS = 15;\nexport default PlayerPokemon;\n","// const MovingObject = require(\"./moving_object.js\");\n// const Util = require(\"./util.js\");\n// const Game = require(\"./game.js\");\n// window.Game = Game;\n// window.MovingObject = MovingObject;\n// window.ctx = document.getElementById(\"game-canvas\").getContext(\"2d\");\n\n// console.log(\"Webpack is working!\");\n// console.log(\"test!\");\n\n// function PokeRoyale(options) {\n//   PokeRoyale.prototype.COLOR = 'pink';\n//   PokeRoyale.prototype.RADIUS = 69; \n//   MovingObject.call(this, {pos: options.pos, color: this.COLOR, radius: this.RADIUS, vel: Util.randomVec(this.RADIUS)});\n//   // const mo = new MovingObject({color: this.COLOR, radius: this.RADIUS, vel: Util.randomVec(this.RADIUS)});\n// }\n// // Asteroid.prototype.COLOR = 'pink';\n// // Asteroid.prototype.RADIUS = 69; \n\n// Util.inherits(Asteroid, MovingObject);\n// window.PokeRoyale = PokeRoyale;\n\n\nimport Board from \"./board\";\nimport * as UI from \"./ui\"\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\n  if (window.outerWidth / window.innerWidth < 0.89 || window.outerWidth / window.innerWidth > 0.91) {\n    alert(\"App only supported on Chrome. Please modify browser zoom to 90%.\")\n  }\n\n  const canvasEl = document.getElementsByTagName(\"canvas\")[0];\n  canvasEl.width = 5000;\n  canvasEl.height = 4300;\n\n  const ctx = canvasEl.getContext(\"2d\");\n\n  ctx.translate(0,0)\n  const board = new Board(ctx);\n  board.start();\n\n  // TODO: Needs to be deleted later as User chooses either fire/water/grass at start\n  // board.addPlayerPokemon([100,100]);\n  // board.addPlayerPokemon([200,200]);\n\n  canvasEl.offsetX = 0;\n  canvasEl.offsetY = 0;\n  function EventWrapper(e, canvas) {\n    this.x = e.x + canvas.offsetX || e.x;\n    this.y = e.y + canvas.offsetY || e.y;\n    this.preventDefault = e.preventDefault.bind(e);\n    this.button = e.button;\n    // console.log(\"offsetX \" + canvas.offsetX);\n    // console.log(\"offsetY \" + canvas.offsetY);\n  }\n  canvasEl.drag = false;\n\n  canvasEl.addEventListener(\"mousedown\", function(e){\n    this.drag = false;\n    e.preventDefault();\n    let wrapper = new EventWrapper(e, this)\n    board.handleLeftMouseClick.bind(board)(wrapper);\n    this.onmousemove = function (e) {\n      let wrapper = new EventWrapper(e, this);\n      // console.log('x: ' + wrapper.x);\n      // console.log((\"y: \" + wrapper.x));\n      board.handleMouseDownAndMouseMove.bind(board)(wrapper);\n     }\n    // this.addEventListener(\"mousemove\", board.handleMouseDownAndMouseMove.bind(board));\n  });\n  canvasEl.addEventListener(\"mouseup\", function(e){\n    let wrapper = new EventWrapper(e, this);\n    board.handleMouseUp.bind(board)(wrapper);\n    this.onmousemove = null;\n    // this.removeEventListener(\"mousemove\", board.handleMouseDownAndMouseMove);\n  });\n\n  const makeDoubleClick = function (e) {\n    let clicks = 0,\n      timeout;\n    return function (e) {\n      clicks++;\n      if (clicks == 1) {\n        timeout = setTimeout(function () {\n          single(e);\n          clicks = 0;\n        }, 250);\n      } else {\n        clearTimeout(timeout);\n        double(e);\n        clicks = 0;\n      }\n    };\n  }\n\n  // canvasEl.addEventListener(\"click\", makeDoubleClick(), false);\n  // const single = function (e) {\n  //   let wrapper = new EventWrapper(e, this);\n  //   this.onmousemove = null;\n  //   board.handleLeftMouseClick.bind(board)(wrapper);\n  // }\n  // const double = function (e) {\n  //   board.handleDoubleMouseClick.bind(board)(e);\n  // }\n\n\n  canvasEl.addEventListener('click', function(e){\n    let wrapper = new EventWrapper(e, this);\n    this.onmousemove = null;\n    if(!this.drag) {\n      board.handleLeftMouseClick.bind(board)(wrapper);\n    }\n      ;},\n    false);\n  canvasEl.addEventListener('contextmenu', function(e){\n    let wrapper = new EventWrapper(e, this);\n    this.onmousemove = null;\n    board.handleRightMouseClick.bind(board)(wrapper);\n  }, false);\n\n  // canvasEl.addEventListener(\"mouseover\", function(e){\n  //   console.log(e);\n  // }, false);\n\n  // TODO use 4 rectangles as a border around viewport and mouseover on each\n  canvasEl.addEventListener(\"mousemove\", function(e) {\n      this.drag = true;\n      if (e.x >= canvasEl.width - 5) {\n        this.offsetX += e.x + 5 - canvasEl.width;\n        ctx.translate(-(e.x + 5 - canvasEl.width), 0);\n      }\n      // if (e.x > canvasEl.length) {\n      //   ctx.translate(e.x - canvasEl.width)\n      // }\n      // if (e.y < 0) {\n      //   ctx.translate(e.x - canvasEl.width);\n      // }\n      // if (e.y > canvasEl.height) {\n      //   ctx.translate(e.x - canvasEl.width)\n      // }\n    }, false);\n  canvasEl.addEventListener(\"wheel\", function (e) {\n    const dirX = parseInt(e.deltaX * -1);\n    const dirY = parseInt(e.deltaY*-1);\n    this.offsetX -= dirX;\n    this.offsetY -= dirY;\n\n    let map = document.getElementById(\"canvas-map\");\n    if (map.style.left === \"\") { map.style.left = 0 };\n    if (map.style.top === \"\") { map.style.top = 0 };\n    if (parseInt(map.style.left) + dirX < 0 && parseInt(map.style.left) + dirX > map.offsetWidth * -1 + viewport.offsetWidth) {\n      map.style.left = parseInt(map.style.left) + dirX;\n    } else {\n      this.offsetX += dirX;\n    }\n    if (parseInt(map.style.top) + dirY < 0 && parseInt(map.style.top) + dirY > map.offsetHeight * -1 + viewport.offsetHeight) {\n      map.style.top = parseInt(map.style.top) + dirY;\n    } else {\n      this.offsetY += dirY;\n    } \n    board.setOffsets(this.offsetX, this.offsetY); \n  }, false);\n  Object.keys(Board.MOVES).forEach(function(k) {\n    key(k, () => { \n      const dirX = Board.MOVES[k][0];\n      const dirY = Board.MOVES[k][1];\n      this.offsetX -= dirX;\n      this.offsetY -= dirY;\n      // ctx.save();\n      //TODO: map and this are the same...\n      let map = document.getElementById(\"canvas-map\");\n      let viewport = document.getElementById(\"viewport\");\n      if (map.style.left === \"\") { map.style.left = 0 };\n      if (map.style.top === \"\") { map.style.top = 0 };\n      if (parseInt(map.style.left) + dirX < 0 && parseInt(map.style.left) + dirX > map.offsetWidth * -1 + viewport.offsetWidth) {\n        map.style.left = parseInt(map.style.left) + dirX;\n      } else {\n        this.offsetX += dirX;\n      }\n      if (parseInt(map.style.top) + dirY < 0 && parseInt(map.style.top) + dirY > map.offsetHeight * -1 + viewport.offsetHeight) {\n        map.style.top = parseInt(map.style.top) + dirY;\n      } else {\n        this.offsetY += dirY;\n      }\n      console.log(map.style.left)\n      // ctx.translate(dirX, dirY); \n      board.setOffsets(this.offsetX, this.offsetY);\n    });\n  }, canvasEl);\n  key('del', function(){\n    board.handleDeleteKeyClick();\n  }.bind(canvasEl));\n  \n\n  window.ctx = ctx;\n  window.UI = UI;\n});\n\n\n","const Stream = require(\"../vendor/stream\");\nconst Util = require(\"./util\");\n\nclass Pokemon {\n  constructor(options) {\n    this.pos = options.pos;\n    this.vel = options.vel;\n    this.radius = options.radius;\n    this.color = options.color;\n    this.destination = options.destination;\n    this.selected = options.selected;\n    this.imgSrc = options.imgSrc;\n    this.imgSrcBack = options.imgSrcBack;\n    this.imgId = options.imgId;\n    this.scale = parseFloat(options.scale) || 1;\n    if (this.imgSrc && !this.spritesheetCanvas && this.imgSrc.slice(this.imgSrc.length - 3, this.imgSrc.length) === 'gif') {\n      let img = document.createElement(\"img\");\n      img.src = this.imgSrc;\n      img.id = this.imgId; \n      img.setAttribute(\"rel:animated_src\", this.imgSrc);\n      img.crossOrigin = \"use-credentials\";\n      let div = document.getElementById(\"spritesheets\");\n      div.appendChild(img);\n\n      let superGif = new SuperGif({\n        gif: document.getElementById(this.imgId),\n        auto_play: false\n      });\n      // superGif.set_canvas_scale(this.scale); // TODO: Scaling\n      const play = (res) => {\n        superGif.play();\n        for (let i = 1; i < superGif.get_length(); i++) {\n          let offset = { x: 0, y: i * superGif.get_canvas().height * this.scale };\n          superGif.set_frame_offset(i, offset);\n        }\n        superGif.set_sizes(superGif.get_canvas().width * this.scale, superGif.get_length() * superGif.get_canvas().height * this.scale);\n        superGif.get_canvas().id = this.imgId;\n        this.spritesheetCanvas = superGif.get_canvas();\n        this.num_frames = superGif.get_length();\n        this.height = (this.spritesheetCanvas.height / this.num_frames);\n        this.width = (this.spritesheetCanvas.width);\n        this.radius = this.width > this.height ? this.width / 2 : this.height / 2;\n\n        if(this.radius > 250) {\n          alert('Pokemon too big!')\n          return;\n        }\n        console.log(this.radius)\n        if (this.radius < 10) {\n          alert('Pokemon too small!')\n          return;\n        }\n\n      }\n      superGif.load(play);\n\n      // Make the back-facing gif\n      let imgBack = document.createElement(\"img\");\n      imgBack.src = this.imgSrcBack;\n      imgBack.id = this.imgId + 'b';\n      imgBack.setAttribute(\"rel:animated_src\", this.imgSrcBack);\n      imgBack.crossOrigin = \"use-credentials\";\n      div.appendChild(imgBack);\n      // dispatchEvent.style.display = 'hidden';\n\n      let superGifBack = new SuperGif({\n        gif: document.getElementById(imgBack.id),\n        auto_play: false\n      });\n      const playBack = (res) => {\n        superGifBack.play();\n        for (let i = 1; i < superGifBack.get_length(); i++) {\n          let offset = { x: 0, y: i * superGifBack.get_canvas().height };\n          superGifBack.set_frame_offset(i, offset);\n        }\n        superGifBack.set_sizes(superGifBack.get_canvas().width, superGifBack.get_length() * superGifBack.get_canvas().height);\n        superGifBack.get_canvas().id = this.imgBackId;\n        this.spritesheetCanvasBack = superGifBack.get_canvas();\n        this.num_frames_back = superGifBack.get_length();\n        this.height_back = this.spritesheetCanvasBack.height / this.num_frames_back;\n        this.width_back = this.spritesheetCanvasBack.width;\n        this.radius_back = this.width_back > this.height_back ? this.width_back / 2 : this.height_back / 2;\n      }\n      superGifBack.load(playBack);\n\n    }\n    this.currentFrame = 0;   \n    this.goingRound = false;\n  }\n\n  stepGif(ctx) {\n    const flipSpriteHorizontally = function (img, x, y, spriteX, spriteY, spriteW, spriteH) {\n      // move to x + img's width\n      // adding img.width is necessary because we're flipping from\n      //     the right side of the img so after flipping it's still\n      //     at [x,y]\n      ctx.translate(x + spriteW, y);\n\n      // scaleX by -1; this \"trick\" flips horizontally\n      ctx.scale(-1, 1);\n\n      // draw the img\n      // no need for x,y since we've already translated\n      ctx.drawImage(img,\n        spriteX, spriteY, spriteW, spriteH, 0, 0, spriteW, spriteH\n      );\n\n      // always clean up -- reset transformations to default\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n    };\n    if (this.spritesheetCanvas && this.vel[0] <= 0 && this.vel[1] >= 0) {\n      ctx.drawImage(this.spritesheetCanvas, 0, this.currentFrame * this.height, this.width, this.height,\n        this.pos[0] - this.width / 2, this.pos[1] - this.height / 2, this.width, this.height);\n      this.currentFrame = (this.currentFrame + 1) % this.num_frames;\n      console.log(this.currentFrame);\n    } else if (this.spritesheetCanvasBack && this.vel[0] > 0 && this.vel[1] < 0) {\n      ctx.drawImage(this.spritesheetCanvasBack, 0, this.currentFrame * this.height_back, this.width_back, this.height_back,\n        this.pos[0] - this.width_back / 2, this.pos[1] - this.height_back / 2, this.width_back, this.height_back);\n      this.currentFrame = (this.currentFrame + 1) % this.num_frames_back;\n    } else if (this.spritesheetCanvas && this.vel[0] > 0 && this.vel[1] >= 0) {\n      flipSpriteHorizontally(this.spritesheetCanvas, this.pos[0] - this.width / 2, this.pos[1] - this.height / 2,\n        0, this.currentFrame * this.height, this.width, this.height);\n      this.currentFrame = (this.currentFrame + 1) % this.num_frames;\n    } else if (this.spritesheetCanvasBack && this.vel[0] < 0 && this.vel[1] < 0) {\n      flipSpriteHorizontally(this.spritesheetCanvasBack, this.pos[0] - this.width_back / 2, this.pos[1] - this.height_back / 2,\n        0, this.currentFrame * this.height_back, this.width_back, this.height_back);\n      this.currentFrame = (this.currentFrame + 1) % this.num_frames_back;\n    }\n  }\n\n\n  draw(ctx) {\n    //TODO: delete if not needed\n    if (false && !this.XMLHttpRequestData && !document.getElementById(\"charmander\")) {\n      var img = document.createElement(\"img\");\n      img.src = `https://sprites.pokecheck.org/bw/i/494.gif`;\n      img.id = 'charmander'\n      img.setAttribute(\"rel:animated_src\", `https://sprites.pokecheck.org/bw/i/494.gif`);\n      let div = document.getElementById(\"x\");\n      div.appendChild(img);\n\n      img.onload = function () {\n        if (!this.gifHeight && !this.gifWidth) { \n          this.gifHeight = img.height;\n          this.gifWidth = img.width;\n        }\n      }\n\n\n\n\n      let gif = document.getElementById('charmander');\n      let src = gif.getAttribute('rel:animated_src')\n\n      // fetch(src).then(res => {\n      //   debugger\n      // });\n\n      var h = new XMLHttpRequest();\n      h.open('GET', src, true);\n      this.loading_complete.bind(this);\n\n\n      // h.onload = function (e) {\n      //     debugger\n      //     var XMLHttpRequestData = this.response;\n      //   }\n      \n      h.onreadystatechange = function () {\n        if (h.readyState == XMLHttpRequest.DONE) {\n          this.XMLHttpRequestData = h.response;\n\n          // stream = new Stream(this.XMLHttpRequestData);\n          // setTimeout(doParse, 0);\n        }\n      }.bind(this)\n      h.send();\n    } else if (false && this.XMLHttpRequestData && !this.parsed) {\n      let stream = new Stream(this.XMLHttpRequestData);\n\n\n      // setTimeout(Util.parseGIF(stream, handler), 0);\n\n\n      let charmander = new SuperGif({\n        gif: document.getElementById(\"charmander\"),\n        auto_play: false\n      });\n      // debugger //TODO: TRY charmander.set_frame_offset   <---> setSizes\n\n\n      // charmander.load();\n      // Util.parseGIF(stream, charmander.handler)\n      this.parsed = true;\n\n    }\n\n    // if (this.selected) {\n    //   ctx.beginPath();\n    //   ctx.arc(this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true);\n    //   ctx.stroke();\n    // }\n\n    // if (!this.intervalStarted && (this.spritesheetCanvas && this.vel[0] <= 0 && this.vel[1]) >= 0 || \n    //   (this.spritesheetCanvasBack && this.vel[0] > 0 && this.vel[1] < 0) || \n    //   (this.spritesheetCanvas && this.vel[0] > 0 && this.vel[1] >= 0) || \n    //   (this.spritesheetCanvasBack && this.vel[0] < 0 && this.vel[1] < 0)) {\n    //   let delay = parseInt(5000 / this.num_frames);\n    //   setInterval(this.stepGif.bind(this), delay, ctx);\n    //   this.intervalStarted = true;\n    // } else {\n    //   let img = new Image();\n    //   img.src = this.imgSrc;\n    //   img.id = this.imgId;\n    //   ctx.drawImage(img, this.pos[0] - this.width / 2, this.pos[1] - this.height / 2);\n    //   img.onload = function (e) {\n    //     this.width = e.target.width;\n    //     this.height = e.target.height;\n    //   }.bind(this)\n    // }\n\n    ///////////////---- THIS SECTION WORKS ------////////////////////////\n    const flipSpriteHorizontally = function (img, x, y, spriteX, spriteY, spriteW, spriteH) {\n      // move to x + img's width\n      // adding img.width is necessary because we're flipping from\n      //     the right side of the img so after flipping it's still\n      //     at [x,y]\n      ctx.translate(x + spriteW, y);\n\n      // scaleX by -1; this \"trick\" flips horizontally\n      ctx.scale(-1, 1);\n\n      // draw the img\n      // no need for x,y since we've already translated\n      ctx.drawImage(img,\n        spriteX, spriteY, spriteW, spriteH, 0, 0, spriteW, spriteH\n      );\n\n      // always clean up -- reset transformations to default\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    if (this.spritesheetCanvas && this.vel[0] <= 0 && this.vel[1] >= 0) {\n      ctx.drawImage(this.spritesheetCanvas, 0, this.currentFrame * this.height, this.width, this.height,\n         this.pos[0] - this.width / 2, this.pos[1] - this.height / 2, this.width, this.height);\n      this.currentFrame = (this.currentFrame + 1) % this.num_frames;\n    } else if (this.spritesheetCanvasBack && this.vel[0] > 0 && this.vel[1] < 0) {\n      ctx.drawImage(this.spritesheetCanvasBack, 0, this.currentFrame * this.height_back, this.width_back, this.height_back,\n        this.pos[0] - this.width_back / 2, this.pos[1] - this.height_back / 2, this.width_back, this.height_back);\n      this.currentFrame = (this.currentFrame + 1) % this.num_frames_back;\n    } else if (this.spritesheetCanvas && this.vel[0] > 0 && this.vel[1] >= 0) { \n      flipSpriteHorizontally(this.spritesheetCanvas, this.pos[0] - this.width / 2, this.pos[1] - this.height / 2,\n         0, this.currentFrame * this.height, this.width, this.height);\n      this.currentFrame = (this.currentFrame + 1) % this.num_frames;\n    } else if (this.spritesheetCanvasBack && this.vel[0] < 0 && this.vel[1] < 0) {\n      flipSpriteHorizontally(this.spritesheetCanvasBack, this.pos[0] - this.width_back / 2, this.pos[1] - this.height_back / 2,\n        0, this.currentFrame * this.height_back, this.width_back, this.height_back);\n      this.currentFrame = (this.currentFrame + 1) % this.num_frames_back;\n    } else {\n      let img = new Image();\n      img.src = this.imgSrc;\n      img.id = this.imgId;\n      ctx.drawImage(img, this.pos[0] - this.width / 2, this.pos[1] - this.height / 2);\n      img.onload = function(e) {\n        this.width = e.target.width;\n        this.height = e.target.height;\n      }.bind(this)\n    }\n    \n\n    if(this.selected) {\n      ctx.beginPath();\n      ctx.arc(this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true);\n      ctx.stroke();\n    }\n    //////////////////////////////////////////////////////////////////\n    \n    // ctx.fillStyle = this.color;\n    // ctx.fill();\n\n    // if (this.width && this.height) { \n    //   ctx.rect(this.pos[0] - this.width / 2, this.pos[1] - this.height / 2, this.width, this.height); \n    //   ctx.stroke();\n    // } else {\n    //   ctx.beginPath();\n    //   ctx.arc(this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true);\n    //   ctx.stroke();\n    //   ctx.fillStyle = this.color;\n    //   ctx.fill();\n    // }\n  }\n\n  aheadOf(otherObj) {\n    return Math.abs(this.pos[0]) > Math.abs(otherObj.pos[0]) && Math.abs(this.pos[1]) > Math.abs(otherObj.pos[1]);\n  }\n\n  hasSameDestination(otherObject) {\n    return this.destination[0] === otherObject.destination[0] && this.destination[1] === otherObject.destination[1];\n  }\n \n  isMoving() {\n    return this.vel[0] != 0 || this.vel[1] != 0;\n  }\n\n  isCollidedWith(otherObject) {\n    const centerDist = Util.dist(this.pos, otherObject.pos);\n    const oneBehindOther = this.pos[1] + this.radius < otherObject.pos[1] || otherObject.pos[1] + otherObject.radius < this.pos[1];\n    return centerDist < (this.radius + otherObject.radius - 1) && !oneBehindOther;\n  }\n\n  handleCollisionWith(otherObject) {\n    // otherVel = otherObject.vel;\n    const awayFrom0 = otherObject.vel.filter(v => Math.abs(v) > 1).length === otherObject.vel.length &&\n      this.vel.filter(v => Math.abs(v) > 1).length === this.vel.length;\n    const pOtherV = otherObject.vel.map(v => (v) >= 0);\n    const pV = this.vel.map(v => (v) >= 0);\n    const allPos = pOtherV[0] && pOtherV[1] && pV[0] && pV[1];\n    const allNeg = !pOtherV[0] && !pOtherV[1] && !pV[0] && !pV[1];\n    const aheadWillBounce = awayFrom0 && ((!pOtherV[0] && pOtherV[1] && !pV[0] && pV[1]) || (pOtherV[0] && !pOtherV[1] && pV[0] && !pV[1]) || allNeg || allPos);\n    const willGoRound = (pOtherV[0] && pOtherV[1] && !pV[0] && !pV[1]) ||\n      (!pOtherV[0] && !pOtherV[1] && pV[0] && pV[1]) ||\n      (pOtherV[0] && !pOtherV[1] && !pV[0] && pV[1]) ||\n      (!pOtherV[0] && pOtherV[1] && pV[0] && !pV[1]); \n    const willBounce = (pOtherV.concat(pV).filter(p => p).length === 3 ||\n      pOtherV.concat(pV).filter(p => p).length === 1)\n    // 3 possible outcomes if both moving\n    // 1) +y+x +y+x, -y-x -y-x, +y-x +y-x, -y+x -y+x = ahead one bounces forward, behind one destination updated if same destination\n    // 2) +y+x -y-x, -y-x +y+x, +y-x -y+x, -y+x +y-x = teleport through each other\n    // 3) +y+x +y-x, -y+x +y+x, +y-x +y+x, +y+x -y+x, -y-x -y+x, +y-x -y-x, -y+x -y-x, -y-x +y-x  = Bounce off normal, one furthest to destination has destination updated if same destination\n    if (this.isMoving() && otherObject.isMoving()) {\n      // console.log(this.goingRound);\n\n      if (aheadWillBounce && !this.goingRound) {\n        console.log(\"aheadWillBounce\");\n        // debugger\n        if (this.aheadOf(otherObject)) {\n          console.log(\"Ahead BOUNCE\");\n          // debugger\n          // console.log(this.imgSrc + \": \" + this.destination);\n          // console.log(otherObject.destination);\n          // console.log(this.imgSrc);\n          this.move();\n          this.move();\n        } \n        // else if (this.hasSameDestination(otherObject)) {\n        //   console.log(\"UPDATE DEST\")\n        //   this.destination = [this.destination[0] - (this.vel[0] * otherObject.radius * 2), this.destination[1] - (this.vel[1] * otherObject.radius * 2)]\n        // }\n      } else if (willGoRound && !this.goingRound) {\n        console.log(\"willGoRound\");\n        const previousDestination = this.destination.slice();\n        const leftSideOld = [\n          otherObject.pos[0] - (otherObject.radius + this.radius),\n          otherObject.pos[1]\n        ];\n        const rightSideOld = [\n          otherObject.pos[0] + (otherObject.radius + this.radius),\n          otherObject.pos[1]\n        ];\n        this.moveRound(otherObject)\n      } else if (willBounce && !this.goingRound) {\n        console.log(\"willBounce\");\n        console.log(\"this.vel: \" + this.vel)\n        console.log(\"otherObj.vel: \" + otherObject.vel)\n        // debugger\n        const beforeDest = this.destination.slice();\n        this.vel = Util.direction(otherObject.pos, this.pos);\n        this.move();\n        this.move();\n        this.setMotionAndDestination(beforeDest);\n        // this.destination = [this.destination[0] - this.vel[0] * otherObject.radius * 2, this.destination[1] - this.vel[1] * otherObject.radius * 2]\n    }\n    } else if (!this.goingRound && this.isMoving() && Util.dist(this.pos, this.destination) <= otherObject.radius + this.radius) {\n      console.log(\"Early Arrival\")\n      this.destination = this.pos;\n    } else if (this.isMoving()) {\n      // TODO: A* Pathing\n      // Go round if pokemon's feet is \"inside\" the colliding object\n      if(!this.goingRound) {\n        this.moveRound(otherObject);\n      }\n    } else {\n      this.vel = Util.direction(otherObject.pos, this.pos);\n      this.move();\n      this.move();\n      this.setMotionAndDestination(this.pos);\n    }\n  }\n\n  moveRound(otherObject) {\n    const previousDestination = this.destination.slice();\n    let leftSide = Util.findThirdPointInRightTriangle(\n      otherObject.pos,\n      this.pos,\n      // otherObject.radius > this.radius ? otherObject.radius : this.radius,\n      otherObject.radius + this.radius,\n      1\n    );\n    let rightSide = Util.findThirdPointInRightTriangle(\n      otherObject.pos,\n      this.pos,\n      // otherObject.radius > this.radius ? otherObject.radius : this.radius,\n      otherObject.radius + this.radius,\n      -1\n    );\n    if (Util.dist(this.pos, leftSide) <= Util.dist(this.pos, rightSide)) {\n      this.setMotionAndDestination(leftSide);\n    } else {\n      this.setMotionAndDestination(rightSide);\n    }\n    this.goingRound = true;\n    setTimeout(function() {\n        this.setMotionAndDestination(previousDestination);\n        setTimeout(function () { this.goingRound = false; }.bind(this), 10 * parseInt(Util.dist(this.pos, this.destination) / Util.speed(this.vel)));   \n        console.log(\"time to go round:\" + 10 * Util.dist(this.pos, this.destination) / Util.speed(this.vel));\n      }.bind(this), 10*parseInt(Util.dist(this.pos, this.destination) / Util.speed(this.vel)));\n  }\n\n  move() {\n    this.pos[0] += this.vel[0];\n    this.pos[1] += this.vel[1];\n  }\n\n  moveTo(location) {\n    this.pos[0] = location[0];\n    this.pos[1] = location[1];\n  }\n\n  setMotionAndDestination(destination) {\n    this.vel = Util.direction(this.pos, destination);\n    this.vel[0] *= 4; this.vel[1] *= 4;\n    this.destination = destination;\n  }\n\n\n}\n\nexport default Pokemon;\n \n\n\n// class MovingObject {\n//   constructor(options) {\n//     this.pos = options.pos;\n//     this.vel = options.vel;\n//     this.radius = options.radius;\n//     this.color = options.color;\n//     this.game = options.game;\n//     this.isWrappable = true;\n//   }\n\n//   collideWith(otherObject) {\n//     // default do nothing\n//   }\n\n//   draw(ctx) {\n//     ctx.fillStyle = this.color;\n\n//     ctx.beginPath();\n//     ctx.arc(\n//       this.pos[0], this.pos[1], this.radius, 0, 2 * Math.PI, true\n//     );\n//     ctx.fill();\n//   }\n\n//   isCollidedWith(otherObject) {\n//     const centerDist = Util.dist(this.pos, otherObject.pos);\n//     return centerDist < (this.radius + otherObject.radius);\n//   }\n\n//   move(timeDelta) {\n//     // timeDelta is number of milliseconds since last move\n//     // if the computer is busy the time delta will be larger\n//     // in this case the MovingObject should move farther in this frame\n//     // velocity of object is how far it should move in 1/60th of a second\n//       this.pos[0] += this.vel[0];\n//       this.pos[1] += this.vel[1];\n    \n//     // const velocityScale = timeDelta / NORMAL_FRAME_TIME_DELTA,\n//     //     offsetX = this.vel[0] * velocityScale,\n//     //     offsetY = this.vel[1] * velocityScale;\n\n//     // this.pos = [this.pos[0] + offsetX, this.pos[1] + offsetY];\n\n//     // if (this.game.isOutOfBounds(this.pos)) {\n//     //   if (this.isWrappable) {\n//     //     this.pos = this.game.wrap(this.pos);\n//     //   } else {\n//     //     this.remove();\n//     //   }\n//     // }\n//   }\n\n//   remove() {\n//     this.game.remove(this);\n//   }\n// }\n\n// const NORMAL_FRAME_TIME_DELTA = 1000 / 60;\n\n// module.exports = MovingObject;\n","const Util = require(\"./util\");\nimport Pokemon from \"./pokemon\";\n\nclass SidebarPokemon extends Pokemon {\n  constructor(options) {\n    options.radius = SidebarPokemon.RADIUS;\n    options.vel = [0, 0];\n    options.color = options.color || Util.randomColor();\n    super(options)\n    this.offsets = [0,0];\n    this.starting_pos = options.pos.slice(0);\n    this.isDragging = false;\n    this.selected = true;\n  }\n\n  translationOffset(offsetX, offsetY) {\n    this.offsets = [offsetX, offsetY];\n    this.pos[0] = this.starting_pos[0] + offsetX;\n    this.pos[1] = this.starting_pos[1] + offsetY;\n    console.log(this.pos[0]);\n  }\n\n}\n\nSidebarPokemon.RADIUS = 30;\nexport default SidebarPokemon;","import SidebarPokemon from './sidebar_pokemon'\nconst Util = require(\"./util\");\n\nclass SpawnSidebar {\n    constructor(topLeftCoords) {\n        this.untranslatedTopLeftCoords = topLeftCoords.slice(0);\n        this.topLeftCoords = topLeftCoords;\n        this.width = SidebarPokemon.RADIUS * 4;\n        this.pokeX = topLeftCoords[0] + (this.width / 2);\n        this.ySpacing = SidebarPokemon.RADIUS * 2.5;\n        this.firstPokeYPosition = topLeftCoords[1] + this.width + (1.4*SidebarPokemon.RADIUS);\n        this.pokemon = [];\n        this.offsets = [0, 0];\n        this.generateRandomPokemon();\n        this.height = SpawnSidebar.NUM_POKEMON * SidebarPokemon.RADIUS * 4;\n        setInterval(this.generateRandomPokemon.bind(this), 7500);\n    }\n\n    generateRandomPokemon() {\n        const randomIds = []\n        for(let i = 0; i < 5; i++){\n            let pokeId = (Math.floor(Math.random() * 649) + 1).toString();\n            // let pokeId = \"86\";\n            randomIds.push(pokeId);\n        }\n\n        for (let i = 0; i < SpawnSidebar.NUM_POKEMON; i++) {\n            let newPoke = new SidebarPokemon({\n                pos: [this.pokeX, this.firstPokeYPosition + (i * this.ySpacing)],\n                imgSrc: `https://sprites.pokecheck.org/icon/${randomIds[i]}.png`,\n                imgId: randomIds[i]\n            });\n            newPoke.translationOffset(this.offsets[0], this.offsets[1]);\n            if (this.pokemon.length != SpawnSidebar.NUM_POKEMON) {\n                this.pokemon.push(newPoke);\n            } else if(!this.pokemon[i].isDragging) {\n                this.pokemon[i] = newPoke;\n            }\n        }\n    }\n\n    draw(ctx) {\n        ctx.strokeStyle = 'black';\n        ctx.lineWidth = 0.5;\n        ctx.fillStyle = 'white';\n        ctx.fillRect(this.topLeftCoords[0], this.topLeftCoords[1], this.width, this.height);\n\n        let base_image = new Image();\n        base_image.src = '../assets/images/Drag-Drop-macro.png';\n        ctx.drawImage(base_image, this.topLeftCoords[0], this.topLeftCoords[1], this.width, this.width);\n\n        this.pokemon.forEach(poke => {\n            poke.draw(ctx);\n        });\n\n    }\n\n    translationOffset(offsetX, offsetY) {\n        this.offsets = [offsetX, offsetY];\n        this.topLeftCoords[0] = this.untranslatedTopLeftCoords[0] + offsetX;\n        this.topLeftCoords[1] = this.untranslatedTopLeftCoords[1] + offsetY;\n        this.pokemon.forEach(poke => {\n            poke.translationOffset(offsetX, offsetY);\n        });\n    }\n\n    updateDraggedPoke(pos) {\n        this.pokemon.filter(poke => poke.isDragging)[0].pos = pos;\n    }\n\n    resetAll() {\n        this.pokemon.forEach(poke => {\n            poke.isDragging = false;\n        });\n        this.generateRandomPokemon();\n    }\n\n}\nSpawnSidebar.NUM_POKEMON = 3;\nexport default SpawnSidebar;","const Util = require(\"./util\"); \n\nclass SelectorRectangle {\n    constructor(startCoords, endCoords) {\n        this.startCoords = startCoords; \n        this.updateRect(endCoords);\n    }\n\n    updateRect(endCoords) {\n        this.endCoords = endCoords;\n        this.thirdCoord = [this.startCoords[0], this.endCoords[1]]\n        this.defineRect = [\n            this.startCoords[0],\n            this.startCoords[1],\n            this.endCoords[0],\n            this.endCoords[1],\n            this.thirdCoord[0],\n            this.thirdCoord[1]];\n    }\n\n    inSelectRectangle(coords) {\n        // debugger\n        return Util.inRect(coords, this.defineRect);\n    }\n\n    draw(ctx) {\n        // ctx.fillStyle = 'black';\n        // ctx.fillRect(100,100,200,200);\n        ctx.strokeStyle = 'black';\n        ctx.lineWidth = 0.5;\n        const x = this.endCoords[0] - this.startCoords[0];\n        const y = this.endCoords[1] - this.startCoords[1];\n        ctx.strokeRect(this.startCoords[0],this.startCoords[1],x,y);\n\n        // ctx.rect(this.topleft[0],this.topleft[1],this.bottomRight[0],this.bottomRight[1]);\n        // ctx.stroke();\n    }\n\n\n}\n\nexport {SelectorRectangle};","\nconst Util = {\n  // Find distance between two points.\n  dist(pos1, pos2) {\n    return Math.sqrt(\n      Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2)\n    );\n  },\n  speed(vel) {\n    return Math.sqrt(Math.pow(vel[0], 2) + Math.pow(vel[1], 2));\n  },\n  // Direction vector between two points.\n  direction(pos1, pos2) {\n    if(Util.dist(pos1, pos2) === 0) { return [0, 0] }\n    return [\n      (pos2[0] - pos1[0]) / Util.dist(pos1, pos2),\n      (pos2[1] - pos1[1]) / Util.dist(pos1, pos2)\n    ];\n  },\n  // Note we need 3 points for the rect in case the rectangle is tilted\n  // Corners in ax,ay,bx,by,dx,dy\n  // Point in x, y\n  // Source: https://stackoverflow.com/a/2752754/2734863\n  inRect(point, rect) {\n    [x, y] = point;\n    [ax, ay, bx, by, dx, dy] = rect;\n    const bax = bx - ax;\n    const bay = by - ay;\n    const dax = dx - ax;\n    const day = dy - ay;\n\n    if ((x - ax) * bax + (y - ay) * bay < 0.0) {\n      return false;\n    }\n    if ((x - bx) * bax + (y - by) * bay > 0.0) {\n      return false;\n    }\n    if ((x - ax) * dax + (y - ay) * day < 0.0) {\n      return false;\n    }\n    if ((x - dx) * dax + (y - dy) * day > 0.0) {\n      return false;\n    }\n\n    return true;\n  },\n  randomColor() {\n    const hexDigits = \"0123456789ABCDEF\";\n\n    let color = \"#\";\n    for (let i = 0; i < 3; i++) {\n      color += hexDigits[Math.floor(Math.random() * 16)];\n    }\n\n    return color;\n  },\n  pairs(arr) {\n    let res = [],\n      l = arr.length;\n    for (var i = 0; i < l; ++i)\n      for (var j = i + 1; j < l; ++j) res.push([arr[i], arr[j]]);\n    return res;\n  },\n  // r = distance from right-angle point to unknown\n  // C = right-angle point\n  // B = other point\n  findThirdPointInRightTriangle(C, B, r, left = 1) {// if left = 1 the D is left of the line AB. Run with -1 to get other side\n    // Want other part of midpoint.\n    // C = A + B / 2\n    let A = [0,0];\n    A[0] = 2*C[0] - B[0];\n    A[1] = 2*C[1] - B[1];\n\n    const nx = B[0] - A[0];\n    const ny = B[1] - A[1];\n    r /= Math.sqrt(nx * nx + ny * ny) * left;\n    return [\n      A[0] + nx / 2 - ny * r,\n      A[1] + ny / 2 + nx * r\n    ];\n  },\n\n  // The actual parsing; returns an object with properties.\n  parseGIF(st, handler) {\n    // Generic functions\n    var bitsToNum = function(ba) {\n      return ba.reduce(function(s, n) {\n        return s * 2 + n;\n      }, 0);\n    };\n\n    var byteToBitArr = function(bite) {\n      var a = [];\n      for (var i = 7; i >= 0; i--) {\n        a.push(!!(bite & (1 << i)));\n      }\n      return a;\n    };\n\n    handler || (handler = {});\n\n    // LZW (GIF-specific)\n    var parseCT = function(entries) {\n      // Each entry is 3 bytes, for RGB.\n      var ct = [];\n      for (var i = 0; i < entries; i++) {\n        ct.push(st.readBytes(3));\n      }\n      return ct;\n    };\n\n    var readSubBlocks = function() {\n      var size, data;\n      data = \"\";\n      do {\n        size = st.readByte();\n        data += st.read(size);\n      } while (size !== 0);\n      return data;\n    };\n\n    var parseHeader = function() {\n      var hdr = {};\n      hdr.sig = st.read(3);\n      hdr.ver = st.read(3);\n      if (hdr.sig !== \"GIF\") throw new Error(\"Not a GIF file.\"); // XXX: This should probably be handled more nicely.\n      hdr.width = st.readUnsigned();\n      hdr.height = st.readUnsigned();\n\n      var bits = byteToBitArr(st.readByte());\n      hdr.gctFlag = bits.shift();\n      hdr.colorRes = bitsToNum(bits.splice(0, 3));\n      hdr.sorted = bits.shift();\n      hdr.gctSize = bitsToNum(bits.splice(0, 3));\n\n      hdr.bgColor = st.readByte();\n      hdr.pixelAspectRatio = st.readByte(); // if not 0, aspectRatio = (pixelAspectRatio + 15) / 64\n      if (hdr.gctFlag) {\n        hdr.gct = parseCT(1 << (hdr.gctSize + 1));\n      }\n      handler.hdr && handler.hdr(hdr);\n    };\n\n    var parseExt = function(block) {\n      var parseGCExt = function(block) {\n        var blockSize = st.readByte(); // Always 4\n        var bits = byteToBitArr(st.readByte());\n        block.reserved = bits.splice(0, 3); // Reserved; should be 000.\n        block.disposalMethod = bitsToNum(bits.splice(0, 3));\n        block.userInput = bits.shift();\n        block.transparencyGiven = bits.shift();\n\n        block.delayTime = st.readUnsigned();\n\n        block.transparencyIndex = st.readByte();\n\n        block.terminator = st.readByte();\n\n        handler.gce && handler.gce(block);\n      };\n\n      var parseComExt = function(block) {\n        block.comment = readSubBlocks();\n        handler.com && handler.com(block);\n      };\n\n      var parsePTExt = function(block) {\n        // No one *ever* uses this. If you use it, deal with parsing it yourself.\n        var blockSize = st.readByte(); // Always 12\n        block.ptHeader = st.readBytes(12);\n        block.ptData = readSubBlocks();\n        handler.pte && handler.pte(block);\n      };\n\n      var parseAppExt = function(block) {\n        var parseNetscapeExt = function(block) {\n          var blockSize = st.readByte(); // Always 3\n          block.unknown = st.readByte(); // ??? Always 1? What is this?\n          block.iterations = st.readUnsigned();\n          block.terminator = st.readByte();\n          handler.app && handler.app.NETSCAPE && handler.app.NETSCAPE(block);\n        };\n\n        var parseUnknownAppExt = function(block) {\n          block.appData = readSubBlocks();\n          // FIXME: This won't work if a handler wants to match on any identifier.\n          handler.app &&\n            handler.app[block.identifier] &&\n            handler.app[block.identifier](block);\n        };\n\n        var blockSize = st.readByte(); // Always 11\n        block.identifier = st.read(8);\n        block.authCode = st.read(3);\n        switch (block.identifier) {\n          case \"NETSCAPE\":\n            parseNetscapeExt(block);\n            break;\n          default:\n            parseUnknownAppExt(block);\n            break;\n        }\n      };\n\n      var parseUnknownExt = function(block) {\n        block.data = readSubBlocks();\n        handler.unknown && handler.unknown(block);\n      };\n\n      block.label = st.readByte();\n      switch (block.label) {\n        case 0xf9:\n          block.extType = \"gce\";\n          parseGCExt(block);\n          break;\n        case 0xfe:\n          block.extType = \"com\";\n          parseComExt(block);\n          break;\n        case 0x01:\n          block.extType = \"pte\";\n          parsePTExt(block);\n          break;\n        case 0xff:\n          block.extType = \"app\";\n          parseAppExt(block);\n          break;\n        default:\n          block.extType = \"unknown\";\n          parseUnknownExt(block);\n          break;\n      }\n    };\n\n    var parseImg = function(img) {\n      var deinterlace = function(pixels, width) {\n        // Of course this defeats the purpose of interlacing. And it's *probably*\n        // the least efficient way it's ever been implemented. But nevertheless...\n        var newPixels = new Array(pixels.length);\n        var rows = pixels.length / width;\n        var cpRow = function(toRow, fromRow) {\n          var fromPixels = pixels.slice(fromRow * width, (fromRow + 1) * width);\n          newPixels.splice.apply(\n            newPixels,\n            [toRow * width, width].concat(fromPixels)\n          );\n        };\n\n        // See appendix E.\n        var offsets = [0, 4, 2, 1];\n        var steps = [8, 8, 4, 2];\n\n        var fromRow = 0;\n        for (var pass = 0; pass < 4; pass++) {\n          for (var toRow = offsets[pass]; toRow < rows; toRow += steps[pass]) {\n            cpRow(toRow, fromRow);\n            fromRow++;\n          }\n        }\n\n        return newPixels;\n      };\n\n      img.leftPos = st.readUnsigned();\n      img.topPos = st.readUnsigned();\n      img.width = st.readUnsigned();\n      img.height = st.readUnsigned();\n\n      var bits = byteToBitArr(st.readByte());\n      img.lctFlag = bits.shift();\n      img.interlaced = bits.shift();\n      img.sorted = bits.shift();\n      img.reserved = bits.splice(0, 2);\n      img.lctSize = bitsToNum(bits.splice(0, 3));\n\n      if (img.lctFlag) {\n        img.lct = parseCT(1 << (img.lctSize + 1));\n      }\n\n      img.lzwMinCodeSize = st.readByte();\n\n      var lzwData = readSubBlocks();\n\n      img.pixels = lzwDecode(img.lzwMinCodeSize, lzwData);\n\n      if (img.interlaced) {\n        // Move\n        img.pixels = deinterlace(img.pixels, img.width);\n      }\n\n      handler.img && handler.img(img);\n    };\n\n    var parseBlock = function() {\n      var block = {};\n      block.sentinel = st.readByte();\n\n      switch (\n        String.fromCharCode(block.sentinel) // For ease of matching\n      ) {\n        case \"!\":\n          block.type = \"ext\";\n          parseExt(block);\n          break;\n        case \",\":\n          block.type = \"img\";\n          parseImg(block);\n          break;\n        case \";\":\n          block.type = \"eof\";\n          handler.eof && handler.eof(block);\n          break;\n        default:\n          throw new Error(\"Unknown block: 0x\" + block.sentinel.toString(16)); // TODO: Pad this with a 0.\n      }\n\n      if (block.type !== \"eof\") setTimeout(parseBlock, 0);\n    };\n\n    var parse = function() {\n      parseHeader();\n      setTimeout(parseBlock, 0);\n    };\n\n    parse();\n  }\n\n  // randomVec(length) {\n  //  const deg = 2 * Math.PI * Math.random();\n  //  return Util.scale([Math.sin(deg), Math.cos(deg)], length);\n  // },\n  // scale(vec, m) {\n  //   return [vec[0] * m, vec[1] * m];\n  // },\n  // inherits(childClass, parentClass) {\n  //   function Surrogate() {}\n  //   Surrogate.prototype = parentClass.prototype;\n  //   surrogate = new Surrogate();\n  //   childClass.prototype = surrogate;\n  //   childClass.prototype.constructor = childClass;\n  // }\n};\n\nmodule.exports = Util;","// Stream\n/**\n * @constructor\n */\n// Make compiler happy.\nvar Stream = function (data) {\n    this.data = data;\n    this.len = this.data.length;\n    this.pos = 0;\n\n    this.readByte = function () {\n        if (this.pos >= this.data.length) {\n            throw new Error('Attempted to read past end of stream.');\n        }\n        if (data instanceof Uint8Array)\n            return data[this.pos++];\n        else\n            return data.charCodeAt(this.pos++) & 0xFF;\n    };\n\n    this.readBytes = function (n) {\n        var bytes = [];\n        for (var i = 0; i < n; i++) {\n            bytes.push(this.readByte());\n        }\n        return bytes;\n    };\n\n    this.read = function (n) {\n        var s = '';\n        for (var i = 0; i < n; i++) {\n            s += String.fromCharCode(this.readByte());\n        }\n        return s;\n    };\n\n    this.readUnsigned = function () { // Little-endian.\n        var a = this.readBytes(2);\n        return (a[1] << 8) + a[0];\n    };\n};\n\nmodule.exports = Stream;"],"sourceRoot":""}